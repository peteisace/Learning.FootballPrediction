/* 
 * Match API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PlayerRequest
    /// </summary>
    [DataContract]
        public partial class PlayerRequest :  IEquatable<PlayerRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="dateOfBirth">dateOfBirth.</param>
        /// <param name="position">position.</param>
        /// <param name="height">height.</param>
        /// <param name="heightType">heightType.</param>
        /// <param name="weight">weight.</param>
        /// <param name="weightType">weightType.</param>
        /// <param name="activeInEvents">activeInEvents.</param>
        /// <param name="rating">rating.</param>
        public PlayerRequest(string name = default(string), DateTime? dateOfBirth = default(DateTime?), string position = default(string), int? height = default(int?), MeasurementType heightType = default(MeasurementType), int? weight = default(int?), MeasurementType weightType = default(MeasurementType), List<MatchEventRequest> activeInEvents = default(List<MatchEventRequest>), MatchRatings rating = default(MatchRatings))
        {
            this.Name = name;
            this.DateOfBirth = dateOfBirth;
            this.Position = position;
            this.Height = height;
            this.HeightType = heightType;
            this.Weight = weight;
            this.WeightType = weightType;
            this.ActiveInEvents = activeInEvents;
            this.Rating = rating;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [DataMember(Name="dateOfBirth", EmitDefaultValue=false)]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public string Position { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets HeightType
        /// </summary>
        [DataMember(Name="heightType", EmitDefaultValue=false)]
        public MeasurementType HeightType { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets WeightType
        /// </summary>
        [DataMember(Name="weightType", EmitDefaultValue=false)]
        public MeasurementType WeightType { get; set; }

        /// <summary>
        /// Gets or Sets ActiveInEvents
        /// </summary>
        [DataMember(Name="activeInEvents", EmitDefaultValue=false)]
        public List<MatchEventRequest> ActiveInEvents { get; set; }

        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public MatchRatings Rating { get; set; }

        /// <summary>
        /// Gets or Sets NameHash
        /// </summary>
        [DataMember(Name="nameHash", EmitDefaultValue=false)]
        public int? NameHash { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  HeightType: ").Append(HeightType).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightType: ").Append(WeightType).Append("\n");
            sb.Append("  ActiveInEvents: ").Append(ActiveInEvents).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  NameHash: ").Append(NameHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlayerRequest);
        }

        /// <summary>
        /// Returns true if PlayerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.HeightType == input.HeightType ||
                    (this.HeightType != null &&
                    this.HeightType.Equals(input.HeightType))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.WeightType == input.WeightType ||
                    (this.WeightType != null &&
                    this.WeightType.Equals(input.WeightType))
                ) && 
                (
                    this.ActiveInEvents == input.ActiveInEvents ||
                    this.ActiveInEvents != null &&
                    input.ActiveInEvents != null &&
                    this.ActiveInEvents.SequenceEqual(input.ActiveInEvents)
                ) && 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.NameHash == input.NameHash ||
                    (this.NameHash != null &&
                    this.NameHash.Equals(input.NameHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DateOfBirth != null)
                    hashCode = hashCode * 59 + this.DateOfBirth.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.HeightType != null)
                    hashCode = hashCode * 59 + this.HeightType.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightType != null)
                    hashCode = hashCode * 59 + this.WeightType.GetHashCode();
                if (this.ActiveInEvents != null)
                    hashCode = hashCode * 59 + this.ActiveInEvents.GetHashCode();
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.NameHash != null)
                    hashCode = hashCode * 59 + this.NameHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
