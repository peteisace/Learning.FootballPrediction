/* 
 * Match API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MatchRatings
    /// </summary>
    [DataContract]
        public partial class MatchRatings :  IEquatable<MatchRatings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchRatings" /> class.
        /// </summary>
        /// <param name="rating">rating.</param>
        /// <param name="passes">passes.</param>
        /// <param name="key">key.</param>
        /// <param name="accuracy">accuracy.</param>
        /// <param name="shots">shots.</param>
        /// <param name="onTarget">onTarget.</param>
        /// <param name="tackles">tackles.</param>
        /// <param name="blocks">blocks.</param>
        /// <param name="interceptions">interceptions.</param>
        /// <param name="dribbles">dribbles.</param>
        /// <param name="success">success.</param>
        /// <param name="past">past.</param>
        /// <param name="foulsCommitted">foulsCommitted.</param>
        /// <param name="foulsDrawn">foulsDrawn.</param>
        public MatchRatings(double? rating = default(double?), int? passes = default(int?), int? key = default(int?), int? accuracy = default(int?), int? shots = default(int?), int? onTarget = default(int?), int? tackles = default(int?), int? blocks = default(int?), int? interceptions = default(int?), int? dribbles = default(int?), int? success = default(int?), int? past = default(int?), int? foulsCommitted = default(int?), int? foulsDrawn = default(int?))
        {
            this.Rating = rating;
            this.Passes = passes;
            this.Key = key;
            this.Accuracy = accuracy;
            this.Shots = shots;
            this.OnTarget = onTarget;
            this.Tackles = tackles;
            this.Blocks = blocks;
            this.Interceptions = interceptions;
            this.Dribbles = dribbles;
            this.Success = success;
            this.Past = past;
            this.FoulsCommitted = foulsCommitted;
            this.FoulsDrawn = foulsDrawn;
        }
        
        /// <summary>
        /// Gets or Sets Rating
        /// </summary>
        [DataMember(Name="rating", EmitDefaultValue=false)]
        public double? Rating { get; set; }

        /// <summary>
        /// Gets or Sets Passes
        /// </summary>
        [DataMember(Name="passes", EmitDefaultValue=false)]
        public int? Passes { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public int? Key { get; set; }

        /// <summary>
        /// Gets or Sets Accuracy
        /// </summary>
        [DataMember(Name="accuracy", EmitDefaultValue=false)]
        public int? Accuracy { get; set; }

        /// <summary>
        /// Gets or Sets Shots
        /// </summary>
        [DataMember(Name="shots", EmitDefaultValue=false)]
        public int? Shots { get; set; }

        /// <summary>
        /// Gets or Sets OnTarget
        /// </summary>
        [DataMember(Name="onTarget", EmitDefaultValue=false)]
        public int? OnTarget { get; set; }

        /// <summary>
        /// Gets or Sets Tackles
        /// </summary>
        [DataMember(Name="tackles", EmitDefaultValue=false)]
        public int? Tackles { get; set; }

        /// <summary>
        /// Gets or Sets Blocks
        /// </summary>
        [DataMember(Name="blocks", EmitDefaultValue=false)]
        public int? Blocks { get; set; }

        /// <summary>
        /// Gets or Sets Interceptions
        /// </summary>
        [DataMember(Name="interceptions", EmitDefaultValue=false)]
        public int? Interceptions { get; set; }

        /// <summary>
        /// Gets or Sets Dribbles
        /// </summary>
        [DataMember(Name="dribbles", EmitDefaultValue=false)]
        public int? Dribbles { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public int? Success { get; set; }

        /// <summary>
        /// Gets or Sets Past
        /// </summary>
        [DataMember(Name="past", EmitDefaultValue=false)]
        public int? Past { get; set; }

        /// <summary>
        /// Gets or Sets FoulsCommitted
        /// </summary>
        [DataMember(Name="foulsCommitted", EmitDefaultValue=false)]
        public int? FoulsCommitted { get; set; }

        /// <summary>
        /// Gets or Sets FoulsDrawn
        /// </summary>
        [DataMember(Name="foulsDrawn", EmitDefaultValue=false)]
        public int? FoulsDrawn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatchRatings {\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  Passes: ").Append(Passes).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Accuracy: ").Append(Accuracy).Append("\n");
            sb.Append("  Shots: ").Append(Shots).Append("\n");
            sb.Append("  OnTarget: ").Append(OnTarget).Append("\n");
            sb.Append("  Tackles: ").Append(Tackles).Append("\n");
            sb.Append("  Blocks: ").Append(Blocks).Append("\n");
            sb.Append("  Interceptions: ").Append(Interceptions).Append("\n");
            sb.Append("  Dribbles: ").Append(Dribbles).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Past: ").Append(Past).Append("\n");
            sb.Append("  FoulsCommitted: ").Append(FoulsCommitted).Append("\n");
            sb.Append("  FoulsDrawn: ").Append(FoulsDrawn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchRatings);
        }

        /// <summary>
        /// Returns true if MatchRatings instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchRatings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchRatings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Rating == input.Rating ||
                    (this.Rating != null &&
                    this.Rating.Equals(input.Rating))
                ) && 
                (
                    this.Passes == input.Passes ||
                    (this.Passes != null &&
                    this.Passes.Equals(input.Passes))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Accuracy == input.Accuracy ||
                    (this.Accuracy != null &&
                    this.Accuracy.Equals(input.Accuracy))
                ) && 
                (
                    this.Shots == input.Shots ||
                    (this.Shots != null &&
                    this.Shots.Equals(input.Shots))
                ) && 
                (
                    this.OnTarget == input.OnTarget ||
                    (this.OnTarget != null &&
                    this.OnTarget.Equals(input.OnTarget))
                ) && 
                (
                    this.Tackles == input.Tackles ||
                    (this.Tackles != null &&
                    this.Tackles.Equals(input.Tackles))
                ) && 
                (
                    this.Blocks == input.Blocks ||
                    (this.Blocks != null &&
                    this.Blocks.Equals(input.Blocks))
                ) && 
                (
                    this.Interceptions == input.Interceptions ||
                    (this.Interceptions != null &&
                    this.Interceptions.Equals(input.Interceptions))
                ) && 
                (
                    this.Dribbles == input.Dribbles ||
                    (this.Dribbles != null &&
                    this.Dribbles.Equals(input.Dribbles))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.Past == input.Past ||
                    (this.Past != null &&
                    this.Past.Equals(input.Past))
                ) && 
                (
                    this.FoulsCommitted == input.FoulsCommitted ||
                    (this.FoulsCommitted != null &&
                    this.FoulsCommitted.Equals(input.FoulsCommitted))
                ) && 
                (
                    this.FoulsDrawn == input.FoulsDrawn ||
                    (this.FoulsDrawn != null &&
                    this.FoulsDrawn.Equals(input.FoulsDrawn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rating != null)
                    hashCode = hashCode * 59 + this.Rating.GetHashCode();
                if (this.Passes != null)
                    hashCode = hashCode * 59 + this.Passes.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Accuracy != null)
                    hashCode = hashCode * 59 + this.Accuracy.GetHashCode();
                if (this.Shots != null)
                    hashCode = hashCode * 59 + this.Shots.GetHashCode();
                if (this.OnTarget != null)
                    hashCode = hashCode * 59 + this.OnTarget.GetHashCode();
                if (this.Tackles != null)
                    hashCode = hashCode * 59 + this.Tackles.GetHashCode();
                if (this.Blocks != null)
                    hashCode = hashCode * 59 + this.Blocks.GetHashCode();
                if (this.Interceptions != null)
                    hashCode = hashCode * 59 + this.Interceptions.GetHashCode();
                if (this.Dribbles != null)
                    hashCode = hashCode * 59 + this.Dribbles.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.Past != null)
                    hashCode = hashCode * 59 + this.Past.GetHashCode();
                if (this.FoulsCommitted != null)
                    hashCode = hashCode * 59 + this.FoulsCommitted.GetHashCode();
                if (this.FoulsDrawn != null)
                    hashCode = hashCode * 59 + this.FoulsDrawn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
